generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  
}

model User {
  id               String            @id @default(cuid())
  email            String            @unique
  password         String?
  firstName        String
  lastName         String
  resume_text      String?
  avatarUrl        String?
  emailVerified    DateTime?
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt
  deletedAt        DateTime?         @map("deleted_at")
  additionalInfo   String?           @map("additional_info")
  stripeCustomerId String?           @map("stripe_customer_id")
  image            String?
  Account          Account[]
  careerPreference CareerPreference?
  education        Education[]
  experience       Experience[]
  Session          Session[]
  careerRoadmap    CareerRoadmap?
  certificates     Certificate[]
  payments         Payment[]
  skills           Skill[]

  @@map("users")
}

model Skill {
  id        String    @id @default(cuid())
  name      String    @map("skill_name")
  level     Int?
  category  String?
  jobRole   String?   @map("job_role")
  userId    String    @map("user_id")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @map("deleted_at")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@index([userId])
  @@map("skills")
}

model CareerPreference {
  id              String @id @default(uuid())
  industry        String
  preferredSalary Int
  workType        String
  location        String
  jobRole         String?
  userId          String @unique
  user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Education {
  id             String @id @default(uuid())
  degree         String
  fieldOfStudy   String
  institution    String
  graduationYear Int
  userId         String
  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CareerRoadmap {
  id             String         @id @default(cuid())
  userId         String         @unique @map("user_id")
  roadmapRole    String         @map("roadmap_role")
  roadmapDetails Json           @map("roadmap_details")
  createdAt      DateTime       @default(now()) @map("created_at")
  deletedAt      DateTime?      @map("deleted_at")
  user           User           @relation(fields: [userId], references: [id])
  courses        courses[]
  topics         RoadmapTopic[]

  @@map("career_roadmaps")
}

model RoadmapTopic {
  id             String        @id @default(cuid())
  roadmapId      String        @map("roadmap_id")
  title          String
  description    String?
  order          Int
  completedTasks Int           @default(0) @map("completed_tasks")
  totalTasks     Int           @default(0) @map("total_tasks")
  deletedAt      DateTime?     @map("deleted_at")
  tasks          Task[]
  roadmap        CareerRoadmap @relation(fields: [roadmapId], references: [id])

  @@unique([roadmapId, title])
  @@map("roadmap_topics")
}

model Certificate {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  courseId  String    @map("course_id")
  title     String
  provider  String
  issueDate DateTime  @map("issue_date")
  fileUrl   String    @map("file_url")
  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")
  course    courses   @relation(fields: [courseId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@index([courseId])
  @@index([userId])
  @@map("certificates")
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  isCompleted Boolean      @default(false)
  topicId     String
  order       Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?    @map("deleted_at")
  topic       RoadmapTopic @relation(fields: [topicId], references: [id], onDelete: Cascade)
}

model SubscriptionPlan {
  id              String    @id @default(cuid())
  planName        String    @map("plan_name")
  amount          Float
  currency        String
  billingInterval String    @map("billing_interval")
  createdAt       DateTime  @default(now()) @map("created_at")
  deletedAt       DateTime? @map("deleted_at")
  payments        Payment[]

  @@map("subscription_plans")
}

model Payment {
  id                    String           @id @default(cuid())
  userId                String           @map("user_id")
  planId                String           @map("plan_id")
  stripePaymentIntentId String           @map("stripe_payment_intent_id")
  amount                Float
  currency              String
  status                String
  paymentDate           DateTime         @map("payment_date")
  periodStart           DateTime         @map("period_start")
  periodEnd             DateTime         @map("period_end")
  createdAt             DateTime         @default(now()) @map("created_at")
  deletedAt             DateTime?        @map("deleted_at")
  subscriptionPlan      SubscriptionPlan @relation(fields: [planId], references: [id])
  user                  User             @relation(fields: [userId], references: [id])

  @@map("payments")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Experience {
  id          String    @id
  title       String
  company     String
  startDate   DateTime
  endDate     DateTime?
  description String?
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model courses {
  id              String        @id
  title           String
  description     String?
  instructors     String?
  course_link     String
  roadmap_id      String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deleted_at      DateTime?
  certificates    Certificate[]
  career_roadmaps CareerRoadmap @relation(fields: [roadmap_id], references: [id])

  @@unique([roadmap_id, title])
  @@index([createdAt])
  @@index([roadmap_id])
}

generator client {
  provider = "prisma-client-js"


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  password         String?
  firstName        String?
  lastName         String?
  resumeText       String?   @map("resume_text") @db.Text
  avatarUrl        String?
  emailVerified    DateTime?
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime? @map("deleted_at")
  additionalInfo   String?   @map("additional_info")
  stripeCustomerId String?   @map("stripe_customer_id")
  preferences      CareerPreference?

  // Relations
  skills        Skill[]
  preferences   CareerPreference?
  education     Education[]
  experience    Experience[]
  accounts      Account[]
  sessions      Session[]
  tokens        VerificationToken[]
  careerRoadmap CareerRoadmap?
  payments      Payment[]
  certificates  Certificate[] // Nullable
  assessments   Assessment[]  // Nullable

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Skill {
  id        Int      @id @default(autoincrement())
  name      String
  level     Int?
  category  String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([userId, name])
}

model CareerPreference {
  id              String   @id @default(uuid())
  industry        String
  preferredSalary Int
  workType        String
  location        String
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Education {
  id            String   @id @default(uuid())
  degree        String
  fieldOfStudy  String
  institution   String
  graduationYear Int
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Experience {
  id          String   @id @default(uuid())
  title       String
  company     String
  startDate   DateTime
  endDate     DateTime?
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


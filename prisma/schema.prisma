generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(cuid())
  firstName        String?
  lastName         String?
  email            String         @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  resumeText       String?        @map("resume_text")
  createdAt        DateTime       @default(now()) @map("created_at")
  deletedAt        DateTime?      @map("deleted_at")
  additionalInfo   String?        @map("additional_info")
  stripeCustomerId String?        @map("stripe_customer_id")
  preferences      Json?
  careerRoadmap    CareerRoadmap?
  certificates     Certificate[]
  payments         Payment[]
  skills           Skill[]

  @@map("users")
}

model Skill {
  id          String       @id @default(cuid())
  userId      String       @map("user_id")
  jobRole     String       @map("job_role")
  name        String       @map("skill_name")
  level       Int?
  deletedAt   DateTime?    @map("deleted_at")
  user        User         @relation(fields: [userId], references: [id])

  @@map("skills")
}

model CareerRoadmap {
  id             String         @id @default(cuid())
  userId         String         @unique @map("user_id")
  roadmapRole    String         @map("roadmap_role")
  roadmapDetails Json           @map("roadmap_details")
  createdAt      DateTime       @default(now()) @map("created_at")
  deletedAt      DateTime?      @map("deleted_at")
  courses        Course[]
  user           User           @relation(fields: [userId], references: [id])
  topics         RoadmapTopic[]

  @@map("career_roadmaps")
}

model RoadmapTopic {
  id             String        @id @default(cuid())
  roadmapId      String        @map("roadmap_id")
  title          String
  description    String?
  order          Int
  completedTasks Int           @default(0) @map("completed_tasks")
  totalTasks     Int           @default(0) @map("total_tasks")
  deletedAt      DateTime?     @map("deleted_at")
  tasks          Task[]
  roadmap        CareerRoadmap @relation(fields: [roadmapId], references: [id])

  @@map("roadmap_topics")
  @@unique([roadmapId, title]) //
}


model Course {
  id           String        @id @default(cuid())
  title        String
  description  String?
  instructors  String?
  courseLink   String        @map("course_link")
  roadmapId    String        @map("roadmap_id")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deleted_at   DateTime?     @map("deleted_at")
  roadmap      CareerRoadmap @relation(fields: [roadmapId], references: [id])
  certificates Certificate[]
  @@unique([roadmapId, title]) // Ensures course titles are unique within the same roadmap
}



model Certificate {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  courseId  String    @map("course_id")
  title     String
  provider  String
  issueDate DateTime  @map("issue_date")
  fileUrl   String    @map("file_url")
  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")
  course    Course    @relation(fields: [courseId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@map("certificates")
}


model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  isCompleted Boolean      @default(false)
  topicId     String
  order       Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?    @map("deleted_at")
  topic       RoadmapTopic @relation(fields: [topicId], references: [id], onDelete: Cascade)
}

model SubscriptionPlan {
  id              String    @id @default(cuid())
  planName        String    @map("plan_name")
  amount          Float
  currency        String
  billingInterval String    @map("billing_interval")
  createdAt       DateTime  @default(now()) @map("created_at")
  deletedAt       DateTime? @map("deleted_at")
  payments        Payment[]

  @@map("subscription_plans")
}

model Payment {
  id                    String           @id @default(cuid())
  userId                String           @map("user_id")
  planId                String           @map("plan_id")
  stripePaymentIntentId String           @map("stripe_payment_intent_id")
  amount                Float
  currency              String
  status                String
  paymentDate           DateTime         @map("payment_date")
  periodStart           DateTime         @map("period_start")
  periodEnd             DateTime         @map("period_end")
  createdAt             DateTime         @default(now()) @map("created_at")
  deletedAt             DateTime?        @map("deleted_at")
  subscriptionPlan      SubscriptionPlan @relation(fields: [planId], references: [id])
  user                  User             @relation(fields: [userId], references: [id])

  @@map("payments")
}
